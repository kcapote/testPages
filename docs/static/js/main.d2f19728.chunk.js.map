{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","deseo","guardarDeseo","textoSigilo","guardarTextoSigilo","seleccionados","guardarSeleccionados","className","name","id","rows","onChange","e","target","value","map","letra","idx","key","onClick","seleccionadosTemp","cambiarCheck","href","length","letras","replace","split","toUpperCase","filter","self","indexOf","selecionadosTemp","forEach","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAqGeA,MAjGf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACCC,EADD,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAEOC,EAFP,OAGiCJ,mBAAS,IAH1C,mBAGNK,EAHM,KAGSC,EAHT,KAyCb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,aAAd,yBACA,8BACEA,UAAU,qCACVC,KAAK,QACLC,GAAG,QACHC,KAAK,IACLC,SAAU,SAAAC,GACRV,EAAaU,EAAEC,OAAOC,QAExBA,MAAOb,IAGT,uBAAGM,UAAU,uBACX,8CAGF,yBAAKA,UAAU,eAEVJ,EAAYY,KAAK,SAACC,EAAOC,GAAR,OACd,2BAAOC,IAAKD,EACLE,QAAS,SAACP,IAhCd,SAACA,EAAGK,GACvB,IAAIG,EAAiB,YAAOf,GAC5Be,EAAkBH,IAAQG,EAAkBH,GAC5CX,EAAqBc,GA6BiBC,CAAaT,EAAGK,IAC/BV,UAAYF,EAAcY,GAAO,gBAAiB,QAEtDD,OAQX,wBAAIT,UAAU,SACd,4BAAQA,UAAU,yBACfe,KAAK,IACLH,QA1Ec,WACzB,GAAGlB,EAAMsB,OAAS,EAAE,CAClB,IACIC,EADcvB,EAAMwB,QAAQ,aAAa,IACtBC,MAAM,IAC7BF,EAASA,EAAOT,KAAI,SAAAC,GAAK,OAAIA,EAAMW,iBACnBC,QAAQ,SAAAZ,GAAK,MAAc,MAAVA,KACjBY,QAAO,SAACZ,EAAOC,EAAKY,GAAb,OACLZ,IAAQY,EAAKC,QAAQd,MAGvCZ,EAAmBoB,GAEnB,IAAIO,EAAmB,GACvBP,EAAOQ,SAAQ,SAAAhB,GACbe,EAAiBE,MAAK,MAGxB3B,EAAqByB,MAuDf,WAMA,4BAAQxB,UAAU,gCACde,KAAK,IACLH,QAzDE,WACdjB,EAAa,IACbE,EAAmB,MAqDX,gBC5EQ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2f19728.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [deseo, guardarDeseo] = useState('');\n  const [textoSigilo, guardarTextoSigilo] = useState([]);\n  const [seleccionados, guardarSeleccionados] = useState([]);\n\n \n  const generarTextoSigilo = () => {\n    if(deseo.length > 0){\n      const deseoTemp = deseo.replace(/[.,<>*+-]/g,'');\n      let letras = deseoTemp.split('');\n      letras = letras.map(letra => letra.toUpperCase())\n                     .filter( letra => letra !== ' ' )\n                     .filter((letra, idx, self ) => \n                        idx === self.indexOf(letra)\n                     );\n\n      guardarTextoSigilo(letras);  \n      \n      let selecionadosTemp = [];\n      letras.forEach(letra => {\n        selecionadosTemp.push(false);\n      });\n\n      guardarSeleccionados(selecionadosTemp);\n      \n    }\n  };\n\n\n  const limpiar = () => {\n    guardarDeseo(\"\");\n    guardarTextoSigilo([]);\n  };\n\n  const cambiarCheck = (e, idx) => {\n    let seleccionadosTemp = [...seleccionados];\n    seleccionadosTemp[idx] = !seleccionadosTemp[idx];\n    guardarSeleccionados(seleccionadosTemp);\n     \n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-10\">\n          <div className=\"jumbotron m-5\">\n            <h1 className=\"display-4\">Piensa con cuidado...</h1>\n            <textarea\n              className=\"form-comntrol boxsizingBorder mt-3\"\n              name=\"deseo\"\n              id=\"deseo\"\n              rows=\"3\"\n              onChange={e => {\n                guardarDeseo(e.target.value);\n              }}\n              value={deseo}\n            />\n\n            <p className=\"text-left ml-5 mt-3\">\n              <small>Resultado:</small>\n            </p>  \n\n            <div className=\"select-size\">\n                \n                {textoSigilo.map( (letra, idx) =>(\n                    <label key={idx}\n                           onClick={(e)=>{cambiarCheck(e, idx)} }\n                           className={ seleccionados[idx] ? 'ml-2 selected': 'ml-2' }\n                           >\n                      {letra}\n                    </label>\n                ))}\n\n\n           </div>  \n\n\n            <hr className=\"my-4\" />\n            <button className=\"btn btn-primary btn-lg\" \n               href=\"#\" \n               onClick= {generarTextoSigilo}\n            >\n              Generar\n            </button>\n            <button className=\"btn btn-secondary btn-lg ml-5\" \n                href=\"#\" \n                onClick={limpiar}\n            >\n              Limpiar\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}